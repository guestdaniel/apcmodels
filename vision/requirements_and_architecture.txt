- Requirements
    - ** Main goal: unify multiple auditory models under single API **
    - Hierarchical: elegantly combines multiple model stages together
    - Modular: easily combine various hierarchical stages and readout mechanisms
    - Paralellized: easy-to-use and flexible parallelization options behind the scenes
        - Paralellize multiple runs of same model with noise or random variation in stimulus
        - Parallelize batch runs over stimuli, parameter sets, and/or models
    - Heavily test-driven: should be trivial to run complex regression tests and unit tests
- Architecture
    - Folder/package structure
        - apcmodels
            - signal
                - Signal processing utility scripts (e.g., pure_tone, complex_tone, dbspl_pascal)
            - simulation
                - Code defining *general* logic for simulation objects
            - decode
                - Code defining *general* logic for decoders/analysis tools attached to simulations
            - visualize
                - Code defining *general* logic for visualization tools attached to simulations
            - utility
                - Scripts and utilities for convenient things for modeling
        - tests
            - test package for each module in apcmodels
            - regression
                - Set of regression tests for system-wide behaviors (e.g., replicating a known particular figure/result)
    - Core components
        - simulation (class)
            - As in the old version (apcpy) we'll orient the entire package around a simulation class, but this class
            will be much better than the old version :)
            - Crucially, this class should be capable of automatically handling a few types of "batch" simulations
                - Incremented parameters ala Heinz ideal observers
                - Parameter ranges
                - Stimulus ranges
            - simulation will contain some sort of logical core oriented around a "queue" that can be implicitly handed
            off to multiprocessing, the queue will need to be general enough to handle the range of conditions maybe
            thrown at it (e.g., five stimuli over ten parameter sets) and will need to have some semblance of hierarchical
            organization to permit incremented/multi-parameters within the master queue
        - stimulus (class)
        - results?
            - Not sure how result outputs should be handled, from experience the result class was a touch clunky